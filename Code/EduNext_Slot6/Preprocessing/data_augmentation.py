{"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30776,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# #installing keras-tuner\n# !pip install keras-tuner\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pDFc-NhsqlyF","outputId":"e1bfe838-d963-43b2-daf6-f950449a7d18","execution":{"iopub.status.busy":"2024-09-25T09:07:07.487700Z","iopub.execute_input":"2024-09-25T09:07:07.488419Z","iopub.status.idle":"2024-09-25T09:07:07.492689Z","shell.execute_reply.started":"2024-09-25T09:07:07.488376Z","shell.execute_reply":"2024-09-25T09:07:07.491510Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"#importing necessary liabraries\nimport tensorflow as tf\nimport keras_tuner\nimport matplotlib.pyplot as plt\nimport numpy as np\n","metadata":{"id":"z1PyxJSotiPJ","execution":{"iopub.status.busy":"2024-09-25T09:07:07.495618Z","iopub.execute_input":"2024-09-25T09:07:07.495906Z","iopub.status.idle":"2024-09-25T09:07:21.995149Z","shell.execute_reply.started":"2024-09-25T09:07:07.495870Z","shell.execute_reply":"2024-09-25T09:07:21.994325Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"#loading dataset and spliting it in test and train dataset\n(x_train,y_train),(x_test,y_test)=tf.keras.datasets.fashion_mnist.load_data()","metadata":{"id":"x7fdazbQt5q-","execution":{"iopub.status.busy":"2024-09-25T09:07:21.997011Z","iopub.execute_input":"2024-09-25T09:07:21.998024Z","iopub.status.idle":"2024-09-25T09:07:23.094784Z","shell.execute_reply.started":"2024-09-25T09:07:21.997977Z","shell.execute_reply":"2024-09-25T09:07:23.093738Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n\u001b[1m29515/29515\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\nDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n\u001b[1m26421880/26421880\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\nDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n\u001b[1m5148/5148\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1us/step\nDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n\u001b[1m4422102/4422102\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}]},{"cell_type":"code","source":"#check x_train shape\nx_train.shape\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3n6pR8iGuJHy","outputId":"9fb2a6e2-9947-48d5-a340-8b349bad752b","execution":{"iopub.status.busy":"2024-09-25T09:07:23.096070Z","iopub.execute_input":"2024-09-25T09:07:23.096424Z","iopub.status.idle":"2024-09-25T09:07:23.103227Z","shell.execute_reply.started":"2024-09-25T09:07:23.096393Z","shell.execute_reply":"2024-09-25T09:07:23.102133Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(60000, 28, 28)"},"metadata":{}}]},{"cell_type":"code","source":"#setting the y_train data\nset(y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qKpAKb7vuViF","outputId":"c8136879-b53a-4414-aa9b-dccb5f622c64","execution":{"iopub.status.busy":"2024-09-25T09:07:23.104516Z","iopub.execute_input":"2024-09-25T09:07:23.104861Z","iopub.status.idle":"2024-09-25T09:07:23.123788Z","shell.execute_reply.started":"2024-09-25T09:07:23.104821Z","shell.execute_reply":"2024-09-25T09:07:23.122919Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"},"metadata":{}}]},{"cell_type":"code","source":"#checking a random element 7 and visualizing it\nplt.imshow(x_train[7],cmap='binary')\nplt.xlabel(y_train[7])\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"IkqV1fJ7ucds","outputId":"83ebcf1d-45eb-4ee9-f016-d7e9d408c622","execution":{"iopub.status.busy":"2024-09-25T09:07:23.126683Z","iopub.execute_input":"2024-09-25T09:07:23.127033Z","iopub.status.idle":"2024-09-25T09:07:23.387865Z","shell.execute_reply.started":"2024-09-25T09:07:23.127000Z","shell.execute_reply":"2024-09-25T09:07:23.386999Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#creating model for the tuner\n\ndef create_model(hp):\n  num_hidden_layers = 1  # hidden layer\n  num_units = 8\n  dropout_rate = 0.1  # dropout rate\n  learning_rate = 0.01  # learning rate\n\n  if hp:  # creating a hyperparameter with choices\n    num_hidden_layers = hp.Choice('num_hidden_layers', values=[1, 2, 3])\n    num_units = hp.Choice('num_units', values=[8, 16, 32])\n    dropout_rate = hp.Float('dropout_rate', min_value=0.1, max_value=0.5)\n    learning_rate = hp.Float('learning_rate', min_value=0.0001, max_value=0.01)\n\n  model = tf.keras.models.Sequential()  # creating a sequential model\n\n  # First CONV => RELU => CONV => RELU => POOL layer set\n  model.add(tf.keras.layers.Conv2D(32, (3, 3), padding=\"same\", input_shape=(28, 28, 1)))\n  model.add(tf.keras.layers.Activation(\"relu\"))\n  model.add(tf.keras.layers.BatchNormalization(axis=3))\n  model.add(tf.keras.layers.Conv2D(32, (3, 3), padding=\"same\"))\n  model.add(tf.keras.layers.Activation(\"relu\"))\n  model.add(tf.keras.layers.BatchNormalization(axis=3))\n  model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n  model.add(tf.keras.layers.Dropout(0.25))\n\n  # Second CONV => RELU => CONV => RELU => POOL layer set\n  model.add(tf.keras.layers.Conv2D(64, (3, 3), padding=\"same\"))\n  model.add(tf.keras.layers.Activation(\"relu\"))\n  model.add(tf.keras.layers.BatchNormalization(axis=3))\n  model.add(tf.keras.layers.Conv2D(64, (3, 3), padding=\"same\"))\n  model.add(tf.keras.layers.Activation(\"relu\"))\n  model.add(tf.keras.layers.BatchNormalization(axis=3))\n  model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n  model.add(tf.keras.layers.Dropout(0.25))\n  model.add(tf.keras.layers.Conv2D(128, (3, 3), padding=\"same\"))\n  model.add(tf.keras.layers.Activation(\"relu\"))\n  model.add(tf.keras.layers.BatchNormalization(axis=3))\n  model.add(tf.keras.layers.Conv2D(128, (3, 3), padding=\"same\"))\n  model.add(tf.keras.layers.Activation(\"relu\"))\n  model.add(tf.keras.layers.BatchNormalization(axis=3))\n  model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n  model.add(tf.keras.layers.Dropout(0.25))\n\n  # First (and only) set of FC => RELU layers\n  model.add(tf.keras.layers.Flatten())\n  model.add(tf.keras.layers.Dense(512))\n  model.add(tf.keras.layers.Activation(\"relu\"))\n  model.add(tf.keras.layers.BatchNormalization())\n  model.add(tf.keras.layers.Dropout(0.5))\n\n  # Softmax classifier\n  model.add(tf.keras.layers.Dense(10))\n  model.add(tf.keras.layers.Activation(\"softmax\"))\n\n  model.compile(\n    loss='sparse_categorical_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n    metrics=['accuracy']\n  )\n  return model","metadata":{"id":"92j1yCXZvIeB","execution":{"iopub.status.busy":"2024-09-25T09:08:01.939022Z","iopub.execute_input":"2024-09-25T09:08:01.939915Z","iopub.status.idle":"2024-09-25T09:08:01.960393Z","shell.execute_reply.started":"2024-09-25T09:08:01.939873Z","shell.execute_reply":"2024-09-25T09:08:01.959572Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"def preprocess_data(images, targets, use_augmentation=False, nb_of_augmentation=1):\n    \"\"\"\n    images: raw image\n    targets: target label\n    use_augmentation: True if augmentation should be used\n    nb_of_augmentation: If use_augmentation=True, number of augmentations\n    \"\"\"\n    print(\"Augmenting images...\")\n    X = []\n    y = []\n    for x_, y_ in zip(images, targets):\n        \n        # scaling pixels between 0.0-1.0\n        x_ = x_ / 255.0\n        x_ = x_.reshape(28, 28, 1)  # reshape to include the channel dimension\n        # data Augmentation\n        if use_augmentation:\n            argu_img = image_augmentation(x_, nb_of_augmentation)\n            for a in argu_img:\n                reshaped_a = a.reshape(28, 28, 1)\n                X.append(reshaped_a)\n                y.append(y_)\n                \n        X.append(x_)\n        y.append(y_)\n    print('*Preprocessing completed: %i samples\\n' % len(X))\n    return np.array(X), tf.keras.utils.to_categorical(y)\n\n# Example usage\nx_train, y_train = preprocess_data(x_train, y_train)\nx_test, y_test = preprocess_data(x_test, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:08:08.200747Z","iopub.execute_input":"2024-09-25T09:08:08.201126Z","iopub.status.idle":"2024-09-25T09:08:09.089795Z","shell.execute_reply.started":"2024-09-25T09:08:08.201080Z","shell.execute_reply":"2024-09-25T09:08:09.088865Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Augmenting images...\n*Preprocessing completed: 60000 samples\n\nAugmenting images...\n*Preprocessing completed: 10000 samples\n\n","output_type":"stream"}]},{"cell_type":"code","source":"#creating model summary\n# create_model(None).summary()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rmqkiHNhxHCE","outputId":"5f10fb30-db27-41ab-ed99-dd332b5ed087","execution":{"iopub.status.busy":"2024-09-25T09:07:23.413668Z","iopub.status.idle":"2024-09-25T09:07:23.414035Z","shell.execute_reply.started":"2024-09-25T09:07:23.413841Z","shell.execute_reply":"2024-09-25T09:07:23.413860Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# #defining a class with custom tuner using bayesian optimzation\n# class CustomTuner(keras_tuner.tuners.BayesianOptimization):\n#   def run_trial(self,trial, *args, **kwargs):\n#     kwargs['batch_size']=trial.hyperparameters.Int('batch_size',32,128,step=32) #giving batch size\n#     super(CustomTuner,self).run_trial(trial,*args,**kwargs)\n#     return history.history['val_accuracy'][-1]","metadata":{"id":"e1Uc8O9cxPVn","execution":{"iopub.status.busy":"2024-09-25T09:07:23.415973Z","iopub.status.idle":"2024-09-25T09:07:23.416454Z","shell.execute_reply.started":"2024-09-25T09:07:23.416274Z","shell.execute_reply":"2024-09-25T09:07:23.416293Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# #running a custom tuner\n# tuner=CustomTuner(\n#     create_model,\n#     objective='val_accuracy', #validation accuracy\n#     max_trials=20,           #defining max number of trials\n#     directory='logs',\n#     project_name='fashion_mnist',\n#     overwrite=True\n# )","metadata":{"id":"JoKJoqgfzmSJ","execution":{"iopub.status.busy":"2024-09-25T09:07:23.417938Z","iopub.status.idle":"2024-09-25T09:07:23.418726Z","shell.execute_reply.started":"2024-09-25T09:07:23.418500Z","shell.execute_reply":"2024-09-25T09:07:23.418528Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# tuner.search_space_summary()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OLgcDaIW0dUM","outputId":"f5964e47-3701-45d3-8fc7-6f5807d16a8e","execution":{"iopub.status.busy":"2024-09-25T09:07:23.419940Z","iopub.status.idle":"2024-09-25T09:07:23.420330Z","shell.execute_reply.started":"2024-09-25T09:07:23.420134Z","shell.execute_reply":"2024-09-25T09:07:23.420153Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# tuner.search(\n#     x_train,y_train,\n#     validation_data=(x_test,y_test),\n#     epochs=5,verbose=False\n# )","metadata":{"id":"kvMWIjtq7B0q","execution":{"iopub.status.busy":"2024-09-25T09:07:23.421540Z","iopub.status.idle":"2024-09-25T09:07:23.421889Z","shell.execute_reply.started":"2024-09-25T09:07:23.421712Z","shell.execute_reply":"2024-09-25T09:07:23.421729Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# tuner.results_summary(1)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WJ9BgDs54efe","outputId":"59d3357c-cc58-4dbc-a9cf-92f89e216c96","execution":{"iopub.status.busy":"2024-09-25T09:07:23.423420Z","iopub.status.idle":"2024-09-25T09:07:23.423771Z","shell.execute_reply.started":"2024-09-25T09:07:23.423597Z","shell.execute_reply":"2024-09-25T09:07:23.423615Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# model=tuner.get_best_models(num_models=1)[0]\n# model.summary()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"faSkpD1e4vSm","outputId":"67be5865-fa9c-40b7-f32a-b5a987ee23de","execution":{"iopub.status.busy":"2024-09-25T09:07:23.425200Z","iopub.status.idle":"2024-09-25T09:07:23.425694Z","shell.execute_reply.started":"2024-09-25T09:07:23.425432Z","shell.execute_reply":"2024-09-25T09:07:23.425458Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert y_train and y_test back to sparse format\ny_train = np.argmax(y_train, axis=1)\ny_test = np.argmax(y_test, axis=1)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:08:17.973226Z","iopub.execute_input":"2024-09-25T09:08:17.973649Z","iopub.status.idle":"2024-09-25T09:08:17.983100Z","shell.execute_reply.started":"2024-09-25T09:08:17.973604Z","shell.execute_reply":"2024-09-25T09:08:17.982125Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"model =create_model(None)\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.4, patience=3, min_lr=0.000001)\nearly_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, verbose=1, mode='auto', restore_best_weights=True)\n\nfit = model.fit(\n    x_train,y_train,\n    validation_data=(x_test,y_test),\n    epochs=50,batch_size=64,verbose=1,\n    callbacks=[reduce_lr]\n)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QidZ6ZUi5BAM","outputId":"393511eb-ee40-48b0-bc5f-844e0646f3af","execution":{"iopub.status.busy":"2024-09-25T09:11:43.524607Z","iopub.execute_input":"2024-09-25T09:11:43.525024Z","iopub.status.idle":"2024-09-25T09:17:35.359463Z","shell.execute_reply.started":"2024-09-25T09:11:43.524986Z","shell.execute_reply":"2024-09-25T09:17:35.358499Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 16ms/step - accuracy: 0.7472 - loss: 0.7719 - val_accuracy: 0.8704 - val_loss: 0.3626 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.8797 - loss: 0.3328 - val_accuracy: 0.9034 - val_loss: 0.2679 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9002 - loss: 0.2763 - val_accuracy: 0.9097 - val_loss: 0.2572 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9080 - loss: 0.2527 - val_accuracy: 0.9066 - val_loss: 0.2622 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9153 - loss: 0.2283 - val_accuracy: 0.9204 - val_loss: 0.2156 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9188 - loss: 0.2211 - val_accuracy: 0.9156 - val_loss: 0.2425 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9244 - loss: 0.2089 - val_accuracy: 0.9173 - val_loss: 0.2236 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9310 - loss: 0.1907 - val_accuracy: 0.9272 - val_loss: 0.2090 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9325 - loss: 0.1856 - val_accuracy: 0.9269 - val_loss: 0.2015 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9345 - loss: 0.1810 - val_accuracy: 0.9299 - val_loss: 0.2067 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9411 - loss: 0.1625 - val_accuracy: 0.9342 - val_loss: 0.1879 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9421 - loss: 0.1606 - val_accuracy: 0.9274 - val_loss: 0.2141 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9431 - loss: 0.1560 - val_accuracy: 0.9295 - val_loss: 0.1960 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9445 - loss: 0.1454 - val_accuracy: 0.9341 - val_loss: 0.1912 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9563 - loss: 0.1198 - val_accuracy: 0.9385 - val_loss: 0.1788 - learning_rate: 4.0000e-04\nEpoch 16/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9601 - loss: 0.1080 - val_accuracy: 0.9396 - val_loss: 0.1851 - learning_rate: 4.0000e-04\nEpoch 17/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9649 - loss: 0.0973 - val_accuracy: 0.9368 - val_loss: 0.1902 - learning_rate: 4.0000e-04\nEpoch 18/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9650 - loss: 0.0945 - val_accuracy: 0.9400 - val_loss: 0.1886 - learning_rate: 4.0000e-04\nEpoch 19/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9712 - loss: 0.0801 - val_accuracy: 0.9427 - val_loss: 0.1852 - learning_rate: 1.6000e-04\nEpoch 20/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9729 - loss: 0.0751 - val_accuracy: 0.9424 - val_loss: 0.1890 - learning_rate: 1.6000e-04\nEpoch 21/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9738 - loss: 0.0697 - val_accuracy: 0.9411 - val_loss: 0.1989 - learning_rate: 1.6000e-04\nEpoch 22/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9759 - loss: 0.0656 - val_accuracy: 0.9433 - val_loss: 0.1961 - learning_rate: 6.4000e-05\nEpoch 23/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9747 - loss: 0.0679 - val_accuracy: 0.9431 - val_loss: 0.1968 - learning_rate: 6.4000e-05\nEpoch 24/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9770 - loss: 0.0624 - val_accuracy: 0.9434 - val_loss: 0.1983 - learning_rate: 6.4000e-05\nEpoch 25/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9768 - loss: 0.0629 - val_accuracy: 0.9440 - val_loss: 0.1972 - learning_rate: 2.5600e-05\nEpoch 26/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9784 - loss: 0.0580 - val_accuracy: 0.9443 - val_loss: 0.1977 - learning_rate: 2.5600e-05\nEpoch 27/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9781 - loss: 0.0608 - val_accuracy: 0.9437 - val_loss: 0.1991 - learning_rate: 2.5600e-05\nEpoch 28/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9782 - loss: 0.0615 - val_accuracy: 0.9442 - val_loss: 0.1994 - learning_rate: 1.0240e-05\nEpoch 29/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9780 - loss: 0.0572 - val_accuracy: 0.9440 - val_loss: 0.2003 - learning_rate: 1.0240e-05\nEpoch 30/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9761 - loss: 0.0624 - val_accuracy: 0.9441 - val_loss: 0.1996 - learning_rate: 1.0240e-05\nEpoch 31/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9779 - loss: 0.0597 - val_accuracy: 0.9444 - val_loss: 0.2005 - learning_rate: 4.0960e-06\nEpoch 32/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9795 - loss: 0.0562 - val_accuracy: 0.9439 - val_loss: 0.1998 - learning_rate: 4.0960e-06\nEpoch 33/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9791 - loss: 0.0586 - val_accuracy: 0.9440 - val_loss: 0.2008 - learning_rate: 4.0960e-06\nEpoch 34/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9784 - loss: 0.0587 - val_accuracy: 0.9442 - val_loss: 0.2003 - learning_rate: 1.6384e-06\nEpoch 35/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9796 - loss: 0.0549 - val_accuracy: 0.9446 - val_loss: 0.2009 - learning_rate: 1.6384e-06\nEpoch 36/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9781 - loss: 0.0573 - val_accuracy: 0.9442 - val_loss: 0.2004 - learning_rate: 1.6384e-06\nEpoch 37/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9793 - loss: 0.0559 - val_accuracy: 0.9441 - val_loss: 0.2004 - learning_rate: 1.0000e-06\nEpoch 38/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9799 - loss: 0.0560 - val_accuracy: 0.9441 - val_loss: 0.2004 - learning_rate: 1.0000e-06\nEpoch 39/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9785 - loss: 0.0572 - val_accuracy: 0.9440 - val_loss: 0.2010 - learning_rate: 1.0000e-06\nEpoch 40/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9785 - loss: 0.0577 - val_accuracy: 0.9438 - val_loss: 0.2004 - learning_rate: 1.0000e-06\nEpoch 41/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9784 - loss: 0.0569 - val_accuracy: 0.9434 - val_loss: 0.2007 - learning_rate: 1.0000e-06\nEpoch 42/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9785 - loss: 0.0576 - val_accuracy: 0.9439 - val_loss: 0.2010 - learning_rate: 1.0000e-06\nEpoch 43/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9807 - loss: 0.0535 - val_accuracy: 0.9438 - val_loss: 0.2006 - learning_rate: 1.0000e-06\nEpoch 44/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9779 - loss: 0.0587 - val_accuracy: 0.9441 - val_loss: 0.2011 - learning_rate: 1.0000e-06\nEpoch 45/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9790 - loss: 0.0568 - val_accuracy: 0.9437 - val_loss: 0.2013 - learning_rate: 1.0000e-06\nEpoch 46/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9782 - loss: 0.0577 - val_accuracy: 0.9440 - val_loss: 0.2008 - learning_rate: 1.0000e-06\nEpoch 47/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9799 - loss: 0.0558 - val_accuracy: 0.9438 - val_loss: 0.2008 - learning_rate: 1.0000e-06\nEpoch 48/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9787 - loss: 0.0578 - val_accuracy: 0.9439 - val_loss: 0.2014 - learning_rate: 1.0000e-06\nEpoch 49/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9775 - loss: 0.0591 - val_accuracy: 0.9439 - val_loss: 0.2008 - learning_rate: 1.0000e-06\nEpoch 50/50\n\u001b[1m938/938\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 7ms/step - accuracy: 0.9792 - loss: 0.0558 - val_accuracy: 0.9438 - val_loss: 0.2007 - learning_rate: 1.0000e-06\n","output_type":"stream"}]},{"cell_type":"code","source":"model.evaluate(x_test,y_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:17:48.409718Z","iopub.execute_input":"2024-09-25T09:17:48.410144Z","iopub.status.idle":"2024-09-25T09:17:49.276553Z","shell.execute_reply.started":"2024-09-25T09:17:48.410105Z","shell.execute_reply":"2024-09-25T09:17:49.275658Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9436 - loss: 0.2078\n","output_type":"stream"},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"[0.200734943151474, 0.9437999725341797]"},"metadata":{}}]},{"cell_type":"code","source":"# Plotting training & validation accuracy values\nplt.plot(fit.history['accuracy'])\nplt.plot(fit.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()\n\n# Plotting training & validation loss values\nplt.plot(fit.history['loss'])\nplt.plot(fit.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:17:51.719322Z","iopub.execute_input":"2024-09-25T09:17:51.719704Z","iopub.status.idle":"2024-09-25T09:17:52.214024Z","shell.execute_reply.started":"2024-09-25T09:17:51.719668Z","shell.execute_reply":"2024-09-25T09:17:52.213158Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.applications import InceptionV3\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout\nfrom tensorflow.keras.models import Model\n\n# Creating model for the tuner\ndef create_model(hp):\n    num_units = 8\n    dropout_rate = 0.1\n    learning_rate = 0.01\n\n    if hp:\n        num_units = hp.Choice('num_units', values=[8, 16, 32])\n        dropout_rate = hp.Float('dropout_rate', min_value=0.1, max_value=0.5)\n        learning_rate = hp.Float('learning_rate', min_value=0.0001, max_value=0.01)\n\n    base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(75, 75, 3))\n    x = base_model.output\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(num_units, activation='relu')(x)\n    x = Dropout(dropout_rate)(x)\n    predictions = Dense(10, activation='softmax')(x)\n\n    model = Model(inputs=base_model.input, outputs=predictions)\n\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    model.compile(\n        loss='sparse_categorical_crossentropy',\n        optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n        metrics=['accuracy']\n    )\n    return model\n\n# Assuming x_train and x_test are your training and testing data\n# Resize the input data to (75, 75, 3)\nx_train_resized = tf.image.resize(x_train, (75, 75))\nx_test_resized = tf.image.resize(x_test, (75, 75))\n\n# Convert grayscale images to RGB by duplicating the single channel three times\nx_train_rgb = tf.image.grayscale_to_rgb(x_train_resized)\nx_test_rgb = tf.image.grayscale_to_rgb(x_test_resized)\n\n# Create the model\nmodel_1 = create_model(None)\n\n# Define callbacks\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.4, patience=3, min_lr=0.000001)\nearly_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, verbose=1, mode='auto', restore_best_weights=True)\n\n# Fit the model\nfit = model_1.fit(\n    x_train_rgb, y_train,\n    validation_data=(x_test_rgb, y_test),\n    epochs=50, batch_size=64, verbose=1,\n    callbacks=[early_stopping, reduce_lr]\n)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T09:27:48.917793Z","iopub.execute_input":"2024-09-25T09:27:48.918453Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Epoch 1/50\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}